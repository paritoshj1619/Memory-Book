// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemoryBookServiceClient is the client API for MemoryBookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryBookServiceClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	StorePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error)
	DeletePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Void, error)
	GetAllPhotos(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photos, error)
}

type memoryBookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryBookServiceClient(cc grpc.ClientConnInterface) MemoryBookServiceClient {
	return &memoryBookServiceClient{cc}
}

func (c *memoryBookServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryBookServiceClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryBookServiceClient) StorePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/StorePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryBookServiceClient) UpdatePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/UpdatePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryBookServiceClient) DeletePhoto(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/DeletePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryBookServiceClient) GetAllPhotos(ctx context.Context, in *Photo, opts ...grpc.CallOption) (*Photos, error) {
	out := new(Photos)
	err := c.cc.Invoke(ctx, "/proto.MemoryBookService/GetAllPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryBookServiceServer is the server API for MemoryBookService service.
// All implementations must embed UnimplementedMemoryBookServiceServer
// for forward compatibility
type MemoryBookServiceServer interface {
	CreateUser(context.Context, *User) (*User, error)
	Login(context.Context, *User) (*User, error)
	StorePhoto(context.Context, *Photo) (*Photo, error)
	UpdatePhoto(context.Context, *Photo) (*Photo, error)
	DeletePhoto(context.Context, *Photo) (*Void, error)
	GetAllPhotos(context.Context, *Photo) (*Photos, error)
	mustEmbedUnimplementedMemoryBookServiceServer()
}

// UnimplementedMemoryBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemoryBookServiceServer struct {
}

func (UnimplementedMemoryBookServiceServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMemoryBookServiceServer) Login(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMemoryBookServiceServer) StorePhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorePhoto not implemented")
}
func (UnimplementedMemoryBookServiceServer) UpdatePhoto(context.Context, *Photo) (*Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoto not implemented")
}
func (UnimplementedMemoryBookServiceServer) DeletePhoto(context.Context, *Photo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhoto not implemented")
}
func (UnimplementedMemoryBookServiceServer) GetAllPhotos(context.Context, *Photo) (*Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPhotos not implemented")
}
func (UnimplementedMemoryBookServiceServer) mustEmbedUnimplementedMemoryBookServiceServer() {}

// UnsafeMemoryBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryBookServiceServer will
// result in compilation errors.
type UnsafeMemoryBookServiceServer interface {
	mustEmbedUnimplementedMemoryBookServiceServer()
}

func RegisterMemoryBookServiceServer(s grpc.ServiceRegistrar, srv MemoryBookServiceServer) {
	s.RegisterService(&MemoryBookService_ServiceDesc, srv)
}

func _MemoryBookService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryBookService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryBookService_StorePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).StorePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/StorePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).StorePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryBookService_UpdatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).UpdatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/UpdatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).UpdatePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryBookService_DeletePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).DeletePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/DeletePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).DeletePhoto(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryBookService_GetAllPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Photo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryBookServiceServer).GetAllPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MemoryBookService/GetAllPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryBookServiceServer).GetAllPhotos(ctx, req.(*Photo))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryBookService_ServiceDesc is the grpc.ServiceDesc for MemoryBookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryBookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MemoryBookService",
	HandlerType: (*MemoryBookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MemoryBookService_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MemoryBookService_Login_Handler,
		},
		{
			MethodName: "StorePhoto",
			Handler:    _MemoryBookService_StorePhoto_Handler,
		},
		{
			MethodName: "UpdatePhoto",
			Handler:    _MemoryBookService_UpdatePhoto_Handler,
		},
		{
			MethodName: "DeletePhoto",
			Handler:    _MemoryBookService_DeletePhoto_Handler,
		},
		{
			MethodName: "GetAllPhotos",
			Handler:    _MemoryBookService_GetAllPhotos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
